# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  projectName: VideoCatalogue
  buildConfiguration: 'Release'
  coverletSettings: $(System.DefaultWorkingDirectory)/coverlet.runsettings
  collectorName: 'XPlat Code Coverage'
  mainProject: |
    source/main/Grains/Grains.csproj
    source/main/GrainsInterfaces/GrainsInterfaces.csproj
    source/main/Silo/Silo.csproj
    source/main/VideoCatalogueClient/VideoCatalogueClient.csproj
  unitTests: |
    source/test/Grains.Tests.Unit/Grains.Tests.Unit.csproj
    source/test/VideoCatalogueClient.Tests.Unit/VideoCatalogueClient.Tests.Unit.csproj
  integrationTests: |
    source/test/Grains.Tests.Integration/Grains.Tests.Integration.csproj
    source/test/VideoCatalogueClient.Tests.Integration/VideoCatalogueClient.Tests.Integration.csproj

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - task: DotNetCoreCLI@2
      displayName: Build Project
      inputs:
        command: build
        arguments: '--configuration $(buildConfiguration)'
        projects: $(mainProject)
- stage: UnitTests
  dependsOn: Build
  jobs:
  - job: RunTests
    steps:
    - task: DotNetCoreCLI@2
      displayName: Run Unit Tests
      inputs:
        command: test
        arguments: '--configuration $(buildConfiguration) --collect "$(collectorName)" --settings $(coverletSettings)'
        projects: $(unitTests)
    - task: DotNetCoreCLI@2
      displayName: Install ReportGenerator tool
      inputs:
        command: custom
        custom: tool
        arguments: install --tool-path . dotnet-reportgenerator-globaltool
    - script: reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
      displayName: Create reports
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml 
- stage: IntegrationTests
  dependsOn: UnitTests
  jobs:
    - task: DotNetCoreCLI@2
      enabled: false
      displayName: Run Integration Tests
      env:
        MSBUILDSINGLELOADCONTEXT: 1
      inputs:
        command: test
        arguments: '--configuration $(buildConfiguration)'
        projects: $(integrationTests)
    - task: techtalk.techtalk-specflow-plus.specflow-plus.SpecFlowPlus@0
      displayName: 'SpecFlow+ build step SpecFlow.Plus.Runner.Specs'
      inputs:
        projectFilePath: |
          source/test/Grains.Tests.Integration/Features
          source/test/VideoCatalogueClient.Tests.Integration/Features
        projectName: $(projectName)
        projectLanguage: en
      enabled: false
      continueOnError: true
      condition: always()
      timeoutInMinutes: 10